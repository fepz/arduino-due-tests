Que carajo hace el ArduinoIDE al compilar un proyecto con FreeRTOS
------------------------------------------------------------------

Primero, y antes que nada, al bootear la placa la ejecuci贸n inicia en la funci贸n Reset_Handler, en el archivo hardware\arduino\sam\system\CMSIS\Device\ATMEL\sam3xa\source\gcc\startup_sam3xa.c.

Todo el codigo para inicio de ejecucion parece estar ya compilado en el binario libsam_sam3x8e_gcc_real.a, que se encuentra en el directorio hardware\arduino\sam\variants\arduino_due_x

El archivo startup_sam3xa.c inicializa segmentos (definidos en el linker flash.ld), setea el vector de interrupciones, inicializa sectores de memoria, e invoca la funcion main(). Realiza un include del archivo sam3xa.h, que luego realiza el include del archivo "sam3x8e.h".

Tomamos el proyecto blink.cpp, y analizamos el ouput:

C:\Users\fep\Documents\bin\arduino-1.5.2/hardware/tools/g++_arm_none_eabi/bin/arm-none-eabi-g++ 
    -c   -- Compila y ensambla, pero no linkea
    -g   -- generate debugging information
    -Os  -- optimize for space rather than speed
    -w   -- ignorado / suprime warnings
    -ffunction-sections    -- Place each function into its own section
    -fdata-sections        -- Place data items into their own section
    -nostdlib              -- Only use library directories specified on the command line
    --param max-inline-insns-single=500    -- The maximum number of instructions in a single function eligible for inlining
    -fno-rtti         -- ???
    -fno-exceptions   -- ???
    -Dprintf=iprintf  -- Define una macro, con lo cual printf se reemplaza con iprintf
    -mcpu=cortex-m3   -- Specify the name of the target CPU
    -DF_CPU=84000000L -- Define una macro, con lo cual F_CPU se reemplaza con 84000000L
    -DARDUINO=152     -- Define una macro, luego ARDUINO se reemplaza con 152
    -D__SAM3X8E__     -- Define la macro __SAM3x8E__ con el valor 1
    -mthumb           -- Compile for the Thumb not the ARM
    -DUSB_PID=0x003e  -- Define la macro USB_PID con el valor 0x003e
    -DUSB_VID=0x2341  -- Define la macro USB_VID con el valor 0x2341
    -DUSBCON          -- Define la macro USBCON con el valor 1
    -IC:\Users\fep\Documents\bin\arduino-1.5.2\hardware\arduino\sam\system/libsam 
    -IC:\Users\fep\Documents\bin\arduino-1.5.2\hardware\arduino\sam\system/CMSIS/CMSIS/Include/ 
    -IC:\Users\fep\Documents\bin\arduino-1.5.2\hardware\arduino\sam\system/CMSIS/Device/ATMEL/ 
    -IC:\Users\fep\Documents\bin\arduino-1.5.2\hardware\arduino\sam\cores\arduino 
    -IC:\Users\fep\Documents\bin\arduino-1.5.2\hardware\arduino\sam\variants\arduino_due_x 
    -IC:\Users\fep\Documents\Arduino\libraries\FreeRTOS_ARM 
                      -- add DIR to search list for .include directives
    C:\Users\fep\AppData\Local\Temp\build3472501678454059290.tmp\frBlink.cpp 
    -o C:\Users\fep\AppData\Local\Temp\build3472501678454059290.tmp\frBlink.cpp.o 
                      -- nombre del archivo objeto

Lo primero a tener en cuenta es que el ArduinoIDE convierte el archivo frBlink.ino en frBlink.cpp, y agrega en este varias sentencias del preprocesador (#LINE, etc). Asi, los errores de compilaci贸n se refieren al archivo que se edita en el ArduinoIDE (caso contrario los nros de linea en los warnings o errores no serian los mismos, etc.).

Archivo FreeRTOSConfig.h --
El archivo de configuraci贸n de FreeRTOS se encuentra en el directorio FreeRTOS_ARM/utility/, 
